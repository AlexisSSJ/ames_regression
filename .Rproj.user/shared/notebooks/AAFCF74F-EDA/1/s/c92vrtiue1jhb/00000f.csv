"0","#| label: funciones creadas lm"
"0","#| results: hide"
"0","#| code-fold: true"
"0","pd.options.display.float_format = '{:.2f}'.format"
"0",""
"0","def div_columns(X, c1, c2):"
"0","    X[""c1_c2""] = X[c1]/ X[c2]"
"0","    return X"
"0","    "
"0","    "
"0","    "
"0","def adj_r(y_o, y_p , p, n):"
"0","  r2_adj = 1 - (n - 1) / (n - p - 1) * (1 - r2_score(y_o, y_p))"
"0","  "
"0","  "
"0","def get_metrics (y_pred, y_obs,predictors):"
"0","  me = np.mean(y_obs - y_pred)"
"0","  mae = mean_absolute_error(y_obs, y_pred)"
"0","  mape = mean_absolute_percentage_error(y_obs, y_pred)"
"0","  mse = mean_squared_error(y_obs, y_pred)"
"0","  rmse = np.sqrt(mse)"
"0","  r2 = r2_score(y_obs, y_pred)"
"0","  "
"0","  n = len(y_obs)  # Número de observaciones"
"0","  p = predictors  # Número de predictores "
"0","  r2_adj = 1 - (n - 1) / (n - p - 1) * (1 - r2)"
"0","  "
"0","  "
"0","  metrics_data = {"
"0","      ""Metric"": [""ME"", ""MAE"", ""MAPE"", ""MSE"", ""RMSE"", ""R^2"", ""R^2 Adj""],"
"0","      ""Value"": [me, mae, mape, mse, rmse, r2, r2_adj]"
"0","  }"
"0","  return metrics_data"
"0","  "
"0","def rmv_elements (list_of_elements, complete_list):"
"0","  for element in list_of_elements:"
"0","    complete_list.remove(element)"
"0","  return complete_list"
"0","  "
"0","def validation_results(x_val,y_val,  pipeline , n_preds):"
"0","  y_pred = pipeline.predict(x_val)"
"0","  "
"0","  ames_test = ("
"0","    ames_x_val >>"
"0","    mutate(Sale_Price_Pred = y_pred*_.Gr_Liv_Area, Sale_Price =y_val*_.Gr_Liv_Area))"
"0","  "
"0","  ##### Métricas de desempeño"
"0","  "
"0","  y_obs = ames_test[""Sale_Price""]"
"0","  y_pred = ames_test[""Sale_Price_Pred""]"
"0","  return pd.DataFrame(get_metrics(y_pred, y_obs, n_preds))"
"0","  "
"0","  "
"0",""
