"0","#| label: funciones creadas lm"
"0","#| results: hide"
"0","#| code-fold: true"
"0","def div_columns(X, c1, c2):"
"0","    X[""c1_c2""] = X[c1]/ X[c2]"
"0","    return X"
"0","    "
"0","def get_metrics (y_pred, y_obs,predictors):"
"0","    me = np.mean(y_obs - y_pred)"
"0","    mae = mean_absolute_error(y_obs, y_pred)"
"0","    mape = mean_absolute_percentage_error(y_obs, y_pred)"
"0","    mse = mean_squared_error(y_obs, y_pred)"
"0","    rmse = np.sqrt(mse)"
"0","    r2 = r2_score(y_obs, y_pred)"
"0","    "
"0","    n = len(y_obs)  # Número de observaciones"
"0","    p = len(predictors)  # Número de predictores "
"0","    r2_adj = 1 - (n - 1) / (n - p - 1) * (1 - r2)"
"0","    "
"0","    "
"0","    metrics_data = {"
"0","        ""Metric"": [""ME"", ""MAE"", ""MAPE"", ""MSE"", ""RMSE"", ""R^2"", ""R^2 Adj""],"
"0","        ""Value"": [me, mae, mape, mse, rmse, r2, r2_adj]"
"0","    }"
"0","    return metrics_data"
"0","    "
"0","def rmv_elements (list_of_elements, complete_list):"
"0","    for element in list_of_elements:"
"0","        complete_list.remove(element)"
"0","    return complete_list"
"0",""
