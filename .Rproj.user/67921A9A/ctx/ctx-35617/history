axis_text_y=element_blank()
)
)
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.20),
size=0.8,
alpha=0.7,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(  axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)
);
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.20),
size=0.8,
alpha=0.7,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(  axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
);
)
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.20),
size=0.8,
alpha=0.7,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(  axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)
)
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.20),
size=0.8,
alpha=0.7,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(  figure_size=(700,400),
axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)
)
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.20),
size=0.8,
alpha=0.7,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.20),
size=0.8,
alpha=0.7,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.7,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2)+
geom_boxplot(width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2)+
geom_boxplot(aes(x=-0.21),width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2)+
geom_boxplot(aes(x=-0.21),width=0.6,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2)+
geom_boxplot(aes(x=-0.21),width=0.2,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right')+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2)+
geom_boxplot(aes(x=-0.21),width=0.4,
color='#182E40',
alpha=0,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#9E9352',
style='right',
alpha=0.6)+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2)+
geom_boxplot(aes(x=-0.21),width=0.4,
color='#182E40',
alpha=0.1,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#702C27',
style='right',
alpha=0.6)+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2)+
geom_boxplot(aes(x=-0.21),width=0.4,
color='#182E40',
alpha=0.1,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| results: hide
#| fig-keep: 'all'
from mizani.formatters import comma_format, dollar_format
ames_train = (X_train >> mutate(Sale_Price= y_train))
plt.figure()
(
ames_train >> ggplot(aes(y='Sale_Price', x=0))+
geom_violin( fill='#702C27',
style='right',
alpha=0.6)+
geom_jitter(aes(x=-0.21),
size=0.8,
alpha=0.6,
color='#8E8058',
width=0.2,
random_state=7)+
geom_boxplot(aes(x=-0.21),width=0.4,
color='#182E40',
alpha=0.1,
outlier_alpha=1,
outlier_color='#235C6C',
outlier_size=1.5)+
coord_flip()+
theme_classic()+
ggtitle('Distribución de los precios de venta')+
scale_y_continuous(labels=dollar_format(big_mark=','))+
ylab('Precio de venta')+
theme(axis_ticks_minor_y=element_blank(),
axis_ticks_major_y=element_blank(),
axis_text_y=element_blank()
)+
theme(figure_size=(8, 6))
)
# plt.show()
#| label: startPy
#| include: false
library(reticulate)
use_virtualenv("CD_AMAT_2023")
reticulate::repl_python()
from mlxtend.feature_selection import ColumnSelector
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error
from sklearn.metrics import mean_squared_error, r2_score, make_scorer
from sklearn.model_selection import train_test_split, KFold, cross_val_score, cross_validate
from plydata.one_table_verbs import pull
from mizani.formatters import comma_format, dollar_format
from plotnine import *
from siuba import *
import pandas as pd
import numpy as np
import statsmodels.api as sm
from mlxtend.feature_selection import ColumnSelector
from mlxtend.feature_selection import ColumnSelector
from mlxtend.feature_selection import ColumnSelector
ames = pd.read_csv("data/ames.csv")
ames_y = ames >> pull("Sale_Price")    # ames[["Sale_Price"]]
ames_x = select(ames, -_.Sale_Price)   # ames.drop('Sale_Price', axis=1)
#### DIVISIÓN DE DATOS ####
ames_x_train, ames_x_test, ames_y_train, ames_y_test = train_test_split(
ames_x, ames_y,
test_size = 0.20,
random_state = 195
)
#### FEATURE ENGINEERING ####
## SELECCIÓN DE VARIABLES
# Seleccionamos las variales numéricas de interés
num_cols = ["Full_Bath", "Half_Bath"]
# Seleccionamos las variables categóricas de interés
cat_cols = ["Overall_Cond"]
# Juntamos todas las variables de interés
columnas_seleccionadas = num_cols + cat_cols
pipe = ColumnSelector(columnas_seleccionadas)
from mlxtend.feature_selection import ColumnSelector
from mlxtend.feature_selection import ColumnSelector
