{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "... ",
        "  mutate(error = _.Sale_Price - _.Sale_Price_Pred) >>",
        "... ",
        "  ggplot(aes(x = \"error\")) +",
        "... ",
        "  geom_histogram(color = \"white\", fill = \"black\") +",
        "... ",
        "  geom_vline(xintercept = 0, color = \"red\") +",
        "... ",
        "  scale_x_continuous(labels=dollar_format(big_mark=',', digits=0)) + ",
        "... ",
        "  ylab(\"Conteos de clase\") + xlab(\"Errores\") +",
        "... ",
        "  ggtitle(\"Distribución de error\")",
        "... ",
        ")",
        "Traceback (most recent call last):\n  File \"<string>\", line 2, in <module>\nNameError: name 'ames_test' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "(",
        "... ",
        "ames_test >>",
        "... ",
        "  select(_.Sale_Price, _.Sale_Price_Pred) >>",
        "... ",
        "  mutate(error = _.Sale_Price - _.Sale_Price_Pred) >>",
        "... ",
        "  ggplot(aes(sample = \"error\")) +",
        "... ",
        "  geom_qq(alpha = 0.3) + stat_qq_line(color = \"red\") +",
        "... ",
        "  scale_y_continuous(labels=dollar_format(big_mark=',', digits = 0)) + ",
        "... ",
        "  xlab(\"Distribución normal\") + ylab(\"Distribución de errores\") +",
        "... ",
        "  ggtitle(\"QQ-Plot\")",
        "... ",
        ")",
        "Traceback (most recent call last):\n  File \"<string>\", line 2, in <module>\nNameError: name 'ames_test' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "(",
        "... ",
        "ames_test >>",
        "... ",
        "  select(_.Sale_Price, _.Sale_Price_Pred) >>",
        "... ",
        "  mutate(error = _.Sale_Price - _.Sale_Price_Pred) >>",
        "... ",
        "  ggplot(aes(x = \"Sale_Price\")) +",
        "... ",
        "  geom_linerange(aes(ymin = 0, ymax = \"error\"), colour = \"purple\") +",
        "... ",
        "  geom_point(aes(y = \"error\"), size = 0.05, alpha = 0.5) +",
        "... ",
        "  geom_abline(intercept = 0, slope = 0) +",
        "... ",
        "  scale_x_continuous(labels=dollar_format(big_mark=',', digits=0)) + ",
        "... ",
        "  scale_y_continuous(labels=dollar_format(big_mark=',', digits=0)) +",
        "... ",
        "  xlab(\"Precio real\") + ylab(\"Error de estimación\") +",
        "... ",
        "  ggtitle(\"Relación entre error y precio de venta\")",
        "... ",
        ")",
        "Traceback (most recent call last):\n  File \"<string>\", line 2, in <module>\nNameError: name 'ames_test' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "#### Validación cruzada ####",
        ">>> ",
        "",
        ">>> ",
        "# Definir el objeto K-Fold Cross Validator",
        ">>> ",
        "kf = KFold(n_splits=10, shuffle=True, random_state=42)",
        ">>> ",
        "",
        ">>> ",
        "# Definir las métricas de desempeño que deseas calcular como funciones de puntuación",
        ">>> ",
        "scoring = {",
        "... ",
        "    'neg_mean_squared_error': make_scorer(mean_squared_error, greater_is_better=False),",
        "... ",
        "    'r2': make_scorer(r2_score),",
        "... ",
        "    'neg_mean_absolute_error': make_scorer(mean_absolute_error, greater_is_better=False),",
        "... ",
        "    'mape': make_scorer(mean_absolute_percentage_error, greater_is_better=False)",
        "... ",
        "}",
        ">>> ",
        "",
        ">>> ",
        "# Realizar la validación cruzada y calcular métricas de desempeño utilizando cross_val_score",
        ">>> ",
        "results = cross_validate(",
        "... ",
        "  pipeline, ",
        "... ",
        "  ames_train_selected, ames_y_train,",
        "... ",
        "  cv=kf, ",
        "... ",
        "  scoring=scoring",
        "... ",
        "  )",
        "Traceback (most recent call last):\n  File \"<string>\", line 3, in <module>\nNameError: name 'ames_train_selected' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "# Calcular estadísticas resumidas (media y desviación estándar) de las métricas",
        ">>> ",
        "mean_rmse = np.mean(np.sqrt(-results['test_neg_mean_squared_error']))",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "std_rmse = np.std(np.sqrt(-results['test_neg_mean_squared_error']))",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "mean_r2 = np.mean(results['test_r2'])",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "std_r2 = np.std(results['test_r2'])",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "mean_mae = np.mean(-results['test_neg_mean_absolute_error'])",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "std_mae = np.std(-results['test_neg_mean_absolute_error'])",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "mean_mape = np.mean(-results['test_mape'])",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "std_mape = np.std(-results['test_mape'])",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'np' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "λ",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'λ' is not defined\n",
        ">>> ",
        "# Imprimir los resultados",
        ">>> ",
        "print(f\"MAE: {mean_mae} +/- {std_mae}\")",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'mean_mae' is not defined\n",
        ">>> ",
        "print(f\"MAPE: {mean_mape} +/- {std_mape}\")",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'mean_mape' is not defined\n",
        ">>> ",
        "print(f\"R^2: {mean_r2} +/- {std_r2}\")",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'mean_r2' is not defined\n",
        ">>> ",
        "print(f\"RMSE: {mean_rmse} +/- {std_rmse}\")",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'mean_rmse' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "# pip install mlxtend==0.23.0",
        ">>> ",
        "from mlxtend.feature_selection import ColumnSelector",
        ">>> ",
        "from sklearn.compose import ColumnTransformer",
        ">>> ",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder",
        ">>> ",
        "from sklearn.linear_model import LinearRegression",
        ">>> ",
        "from sklearn.pipeline import Pipeline",
        ">>> ",
        "from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error",
        ">>> ",
        "from sklearn.metrics import mean_squared_error, r2_score, make_scorer",
        ">>> ",
        "from sklearn.model_selection import train_test_split, KFold, cross_val_score, cross_validate",
        ">>> ",
        "",
        ">>> ",
        "from plydata.one_table_verbs import pull",
        ">>> ",
        "from mizani.formatters import comma_format, dollar_format",
        ">>> ",
        "from plotnine import *",
        ">>> ",
        "from siuba import *",
        ">>> ",
        "",
        ">>> ",
        "import pandas as pd",
        ">>> ",
        "import numpy as np",
        ">>> ",
        "import statsmodels.api as sm",
        ">>> ",
        "",
        ">>> ",
        "import mlxtend as mlx",
        ">>> ",
        "",
        ">>> ",
        "#### CARGA DE DATOS ####",
        ">>> ",
        "ames = pd.read_csv(\"data/ames.csv\")",
        ">>> ",
        "",
        ">>> ",
        "ames_y = ames >> pull(\"Sale_Price\")    # ames[[\"Sale_Price\"]]",
        ">>> ",
        "ames_x = select(ames, -_.Sale_Price)   # ames.drop('Sale_Price', axis=1)",
        ">>> ",
        "",
        ">>> ",
        "#### DIVISIÓN DE DATOS ####",
        ">>> ",
        "ames_x_train, ames_x_test, ames_y_train, ames_y_test = train_test_split(",
        "... ",
        " ames_x, ames_y, ",
        "... ",
        " test_size = 0.20, ",
        "... ",
        " random_state = 195",
        "... ",
        " )",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "#### FEATURE ENGINEERING ####",
        ">>> ",
        "",
        ">>> ",
        "## SELECCIÓN DE VARIABLES",
        ">>> ",
        "",
        ">>> ",
        "# Seleccionamos las variales numéricas de interés",
        ">>> ",
        "num_cols = [\"Full_Bath\", \"Half_Bath\"]",
        ">>> ",
        "",
        ">>> ",
        "# Seleccionamos las variables categóricas de interés",
        ">>> ",
        "cat_cols = [\"Overall_Cond\"]",
        ">>> ",
        "",
        ">>> ",
        "# Juntamos todas las variables de interés",
        ">>> ",
        "columnas_seleccionadas = num_cols + cat_cols",
        ">>> ",
        "",
        ">>> ",
        "pipe = ColumnSelector(columnas_seleccionadas)",
        ">>> ",
        "ames_x_train_selected = pipe.fit_transform(ames_x_train)",
        ">>> ",
        "",
        ">>> ",
        "ames_train_selected = pd.DataFrame(",
        "... ",
        "  ames_x_train_selected, ",
        "... ",
        "  columns = columnas_seleccionadas",
        "... ",
        "  )",
        ">>> ",
        "",
        ">>> ",
        "ames_train_selected.info()",
        "<class 'pandas.core.frame.DataFrame'>\r\nRangeIndex: 2344 entries, 0 to 2343\r\nData columns (total 3 columns):\r\n #   Column        Non-Null Count  Dtype \r\n---  ------        --------------  ----- \r\n 0   Full_Bath     2344 non-null   object\r\n 1   Half_Bath     2344 non-null   object\r\n 2   Overall_Cond  2344 non-null   object\r\ndtypes: object(3)\r\nmemory usage: 55.1+ KB\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "## TRANSFORMACIÓN DE COLUMNAS",
        ">>> ",
        "",
        ">>> ",
        "# ColumnTransformer para aplicar transformaciones",
        ">>> ",
        "preprocessor = ColumnTransformer(",
        "... ",
        "    transformers = [",
        "... ",
        "        ('scaler', StandardScaler(), num_cols),",
        "... ",
        "        ('onehotencoding', OneHotEncoder(drop='first'), cat_cols)",
        "... ",
        "    ],",
        "... ",
        "    verbose_feature_names_out = False,",
        "... ",
        "    remainder = 'passthrough'  # Mantener las columnas restantes sin cambios",
        "... ",
        ")",
        ">>> ",
        "",
        ">>> ",
        "transformed_data = preprocessor.fit_transform(ames_train_selected)",
        ">>> ",
        "new_column_names = preprocessor.get_feature_names_out()",
        ">>> ",
        "",
        ">>> ",
        "transformed_df = pd.DataFrame(",
        "... ",
        "  transformed_data.todense(), ",
        "... ",
        "  columns=new_column_names",
        "... ",
        "  )",
        ">>> ",
        "  ",
        ">>> ",
        "transformed_df",
        "      Full_Bath  Half_Bath  ...  Overall_Cond_Very_Good  Overall_Cond_Very_Poor\r\n0      0.780752   1.239868  ...                     0.0                     0.0\r\n1      0.780752  -0.749352  ...                     0.0                     0.0\r\n2      0.780752  -0.749352  ...                     0.0                     0.0\r\n3     -1.013446  -0.749352  ...                     0.0                     0.0\r\n4     -1.013446   1.239868  ...                     0.0                     0.0\r\n...         ...        ...",
        "  ...                     ...                     ...\r\n2339  -1.013446   1.239868  ...                     0.0                     0.0\r\n2340   0.780752  -0.749352  ...                     0.0                     0.0\r\n2341  -1.013446  -0.749352  ...                     0.0                     0.0\r\n2342   0.780752   1.239868  ...                     0.0                     0.0\r\n2343   0.780752  -0.749352  ...                     0.0                     0.0\r\n\r\n[2344 rows x 10 columns]\r\n",
        ">>> ",
        "transformed_df.info()",
        "<class 'pandas.core.frame.DataFrame'>\r\nRangeIndex: 2344 entries, 0 to 2343\r\nData columns (total 10 columns):\r\n #   Column                      Non-Null Count  Dtype  \r\n---  ------                      --------------  -----  \r\n 0   Full_Bath                   2344 non-null   float64\r\n 1   Half_Bath                   2344 non-null   float64\r\n 2   Overall_Cond_Average        2344 non-null   float64\r\n 3   Overall_Cond_Below_Average  2344 non-null   float64\r\n 4   Overall_Cond_Excellent      2344 non-null   float",
        "64\r\n 5   Overall_Cond_Fair           2344 non-null   float64\r\n 6   Overall_Cond_Good           2344 non-null   float64\r\n 7   Overall_Cond_Poor           2344 non-null   float64\r\n 8   Overall_Cond_Very_Good      2344 non-null   float64\r\n 9   Overall_Cond_Very_Poor      2344 non-null   float64\r\ndtypes: float64(10)\r\nmemory usage: 183.2 KB\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "#### PIPELINE Y MODELADO",
        ">>> ",
        "",
        ">>> ",
        "# Crear el pipeline con la regresión lineal",
        ">>> ",
        "pipeline = Pipeline([",
        "... ",
        "   ('preprocessor', preprocessor),",
        "... ",
        "   ('regressor', LinearRegression())",
        "... ",
        "])",
        ">>> ",
        "",
        ">>> ",
        "# Entrenar el pipeline",
        ">>> ",
        "results = pipeline.fit(ames_train_selected, ames_y_train)",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "## PREDICCIONES",
        ">>> ",
        "y_pred = pipeline.predict(ames_x_test)",
        ">>> ",
        "",
        ">>> ",
        "ames_test = (",
        "... ",
        "  ames_x_test >>",
        "... ",
        "  mutate(Sale_Price_Pred = y_pred, Sale_Price = ames_y_test)",
        "... ",
        ")",
        ">>> ",
        "",
        ">>> ",
        "ames_test.info()",
        "<class 'pandas.core.frame.DataFrame'>\r\nIndex: 586 entries, 390 to 714\r\nData columns (total 75 columns):\r\n #   Column              Non-Null Count  Dtype  \r\n---  ------              --------------  -----  \r\n 0   MS_SubClass         586 non-null    object \r\n 1   MS_Zoning           586 non-null    object \r\n 2   Lot_Frontage        586 non-null    int64  \r\n 3   Lot_Area            586 non-null    int64  \r\n 4   Street              586 non-null    object \r\n 5   Alley               586 non-null    object \r\n 6   Lo",
        "t_Shape           586 non-null    object \r\n 7   Land_Contour        586 non-null    object \r\n 8   Utilities           586 non-null    object \r\n 9   Lot_Config          586 non-null    object \r\n 10  Land_Slope          586 non-null    object \r\n 11  Neighborhood        586 non-null    object \r\n 12  Condition_1         586 non-null    object \r\n 13  Condition_2         586 non-null    object \r\n 14  Bldg_Type           586 non-null    object \r\n 15  House_Style         586 non-null    object \r\n 16  Overall_Cond  ",
        "      586 non-null    object \r\n 17  Year_Built          586 non-null    int64  \r\n 18  Year_Remod_Add      586 non-null    int64  \r\n 19  Roof_Style          586 non-null    object \r\n 20  Roof_Matl           586 non-null    object \r\n 21  Exterior_1st        586 non-null    object \r\n 22  Exterior_2nd        586 non-null    object \r\n 23  Mas_Vnr_Type        220 non-null    object \r\n 24  Mas_Vnr_Area        586 non-null    int64  \r\n 25  Exter_Cond          586 non-null    object \r\n 26  Foundation          586 no",
        "n-null    object \r\n 27  Bsmt_Cond           586 non-null    object \r\n 28  Bsmt_Exposure       586 non-null    object \r\n 29  BsmtFin_Type_1      586 non-null    object \r\n 30  BsmtFin_SF_1        586 non-null    int64  \r\n 31  BsmtFin_Type_2      586 non-null    object \r\n 32  BsmtFin_SF_2        586 non-null    int64  \r\n 33  Bsmt_Unf_SF         586 non-null    int64  \r\n 34  Total_Bsmt_SF       586 non-null    int64  \r\n 35  Heating             586 non-null    object \r\n 36  Heating_QC          586 non-null    ob",
        "ject \r\n 37  Central_Air         586 non-null    object \r\n 38  Electrical          586 non-null    object \r\n 39  First_Flr_SF        586 non-null    int64  \r\n 40  Second_Flr_SF       586 non-null    int64  \r\n 41  Gr_Liv_Area         586 non-null    int64  \r\n 42  Bsmt_Full_Bath      586 non-null    int64  \r\n 43  Bsmt_Half_Bath      586 non-null    int64  \r\n 44  Full_Bath           586 non-null    int64  \r\n 45  Half_Bath           586 non-null    int64  \r\n 46  Bedroom_AbvGr       586 non-null    int64  \r\n 47  ",
        "Kitchen_AbvGr       586 non-null    int64  \r\n 48  TotRms_AbvGrd       586 non-null    int64  \r\n 49  Functional          586 non-null    object \r\n 50  Fireplaces          586 non-null    int64  \r\n 51  Garage_Type         586 non-null    object \r\n 52  Garage_Finish       586 non-null    object \r\n 53  Garage_Cars         586 non-null    int64  \r\n 54  Garage_Area         586 non-null    int64  \r\n 55  Garage_Cond         586 non-null    object \r\n 56  Paved_Drive         586 non-null    object \r\n 57  Wood_Deck_SF",
        "        586 non-null    int64  \r\n 58  Open_Porch_SF       586 non-null    int64  \r\n 59  Enclosed_Porch      586 non-null    int64  \r\n 60  Three_season_porch  586 non-null    int64  \r\n 61  Screen_Porch        586 non-null    int64  \r\n 62  Pool_Area           586 non-null    int64  \r\n 63  Pool_QC             586 non-null    object \r\n 64  Fence               586 non-null    object \r\n 65  Misc_Feature        27 non-null     object \r\n 66  Misc_Val            586 non-null    int64  \r\n 67  Mo_Sold             586 ",
        "non-null    int64  \r\n 68  Year_Sold           586 non-null    int64  \r\n 69  Sale_Type           586 non-null    object \r\n 70  Sale_Condition      586 non-null    object \r\n 71  Longitude           586 non-null    float64\r\n 72  Latitude            586 non-null    float64\r\n 73  Sale_Price_Pred     586 non-null    float64\r\n 74  Sale_Price          586 non-null    int64  \r\ndtypes: float64(3), int64(32), object(40)\r\nmemory usage: 347.9+ KB\r\n",
        ">>> ",
        "",
        ">>> ",
        "(",
        "... ",
        "ames_test >>",
        "... ",
        "  select(_.Sale_Price, _.Sale_Price_Pred)",
        "... ",
        ")",
        "      Sale_Price  Sale_Price_Pred\r\n390       165000    210460.576597\r\n1235      124000    171815.687585\r\n2288       75000    171815.687585\r\n107       206000    120369.520280\r\n1861      190000    266134.974142\r\n...          ...              ...\r\n116       171000    176043.917825\r\n398       120500    120369.520280\r\n1253      146000    210460.576597\r\n78        125000    143978.488812\r\n714       110000    154831.608816\r\n\r\n[586 rows x 2 columns]\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "##### Extracción de coeficientes",
        ">>> ",
        "",
        ">>> ",
        "X_train_with_intercept = sm.add_constant(transformed_df)",
        ">>> ",
        "model = sm.OLS(ames_y_train, X_train_with_intercept).fit()",
        ">>> ",
        "",
        ">>> ",
        "model.summary()",
        "<class 'statsmodels.iolib.summary.Summary'>\r\n\"\"\"\r\n                            OLS Regression Results                            \r\n==============================================================================\r\nDep. Variable:                      y   R-squared:                       0.389\r\nModel:                            OLS   Adj. R-squared:                  0.386\r\nMethod:                 Least Squares   F-statistic:                     148.4\r\nDate:              sáb., 07 oct. 2023   Prob (F-statistic):  ",
        "        6.92e-241\r\nTime:                        13:20:57   Log-Likelihood:                -29200.\r\nNo. Observations:                2344   AIC:                         5.842e+04\r\nDf Residuals:                    2333   BIC:                         5.848e+04\r\nDf Model:                          10                                         \r\nCovariance Type:            nonrobust                                         \r\n=============================================================================================",
        "=\r\n                                 coef    std err          t      P>|t|      [0.025      0.975]\r\n----------------------------------------------------------------------------------------------\r\nconst                       1.684e+05   3072.078     54.819      0.000    1.62e+05    1.74e+05\r\nFull_Bath                   3.705e+04   1395.861     26.546      0.000    3.43e+04    3.98e+04\r\nHalf_Bath                   1.399e+04   1318.277     10.615      0.000    1.14e+04    1.66e+04\r\nOverall_Cond_Average        2",
        ".361e+04   3626.732      6.510      0.000    1.65e+04    3.07e+04\r\nOverall_Cond_Below_Average -2.898e+04   7559.385     -3.833      0.000   -4.38e+04   -1.42e+04\r\nOverall_Cond_Excellent       2.06e+04   1.11e+04      1.851      0.064   -1223.878    4.24e+04\r\nOverall_Cond_Fair          -5.408e+04   9776.596     -5.531      0.000   -7.32e+04   -3.49e+04\r\nOverall_Cond_Good           6624.8898   4624.560      1.433      0.152   -2443.787    1.57e+04\r\nOverall_Cond_Poor          -7.097e+04    2.1e+04     -3.379  ",
        "    0.001   -1.12e+05   -2.98e+04\r\nOverall_Cond_Very_Good      5766.3211   6581.572      0.876      0.381   -7140.019    1.87e+04\r\nOverall_Cond_Very_Poor     -9.785e+04   2.57e+04     -3.815      0.000   -1.48e+05   -4.76e+04\r\n==============================================================================\r\nOmnibus:                      945.817   Durbin-Watson:                   1.950\r\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             5981.229\r\nSkew:                           1.783   Prob(",
        "JB):                         0.00\r\nKurtosis:                       9.966   Cond. No.                         23.9\r\n==============================================================================\r\n\r\nNotes:\r\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\r\n\"\"\"\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "##### Métricas de desempeño",
        ">>> ",
        "",
        ">>> ",
        "pd.options.display.float_format = '{:.2f}'.format",
        ">>> ",
        "",
        ">>> ",
        "y_obs = ames_test[\"Sale_Price\"]",
        ">>> ",
        "y_pred = ames_test[\"Sale_Price_Pred\"]",
        ">>> ",
        "",
        ">>> ",
        "me = np.mean(y_obs - y_pred)",
        ">>> ",
        "mae = mean_absolute_error(y_obs, y_pred)",
        ">>> ",
        "mape = mean_absolute_percentage_error(y_obs, y_pred)",
        ">>> ",
        "mse = mean_squared_error(y_obs, y_pred)",
        ">>> ",
        "rmse = np.sqrt(mse)",
        ">>> ",
        "r2 = r2_score(y_obs, y_pred)",
        ">>> ",
        "",
        ">>> ",
        "n = len(y_obs)  # Número de observaciones",
        ">>> ",
        "p = 9  # Número de predictores ",
        ">>> ",
        "r2_adj = 1 - (n - 1) / (n - p - 1) * (1 - r2)",
        ">>> ",
        "",
        ">>> ",
        "metrics_data = {",
        "... ",
        "    \"Metric\": [\"ME\", \"MAE\", \"MAPE\", \"MSE\", \"RMSE\", \"R^2\", \"R^2 Adj\"],",
        "... ",
        "    \"Value\": [me, mae, mape, mse, rmse, r2, r2_adj]",
        "... ",
        "}",
        ">>> ",
        "",
        ">>> ",
        "metrics_df = pd.DataFrame(metrics_data)",
        ">>> ",
        "metrics_df",
        "    Metric         Value\r\n0       ME       -935.44\r\n1      MAE      45776.78\r\n2     MAPE          0.26\r\n3      MSE 4365064775.38\r\n4     RMSE      66068.64\r\n5      R^2          0.34\r\n6  R^2 Adj          0.33\r\n",
        ">>> ",
        "",
        ">>> ",
        "#### Gráficos de desempeño de modelo",
        ">>> ",
        "",
        ">>> ",
        "(",
        "... ",
        "  ames_test >>",
        "... ",
        "    ggplot(aes(x = \"Sale_Price_Pred\", y = \"Sale_Price\")) +",
        "... ",
        "    geom_point() +",
        "... ",
        "    scale_y_continuous(labels = dollar_format(digits=0, big_mark=','), limits = [0, 600000] ) +",
        "... ",
        "    scale_x_continuous(labels = dollar_format(digits=0, big_mark=','), limits = [0, 500000] ) +",
        "... ",
        "    geom_abline(color = \"red\") +",
        "... ",
        "    coord_equal() +",
        "... ",
        "    labs(",
        "... ",
        "      title = \"Comparación entre predicción y observación\",",
        "... ",
        "      x = \"Predicción\",",
        "... ",
        "      y = \"Observación\")",
        "... ",
        ")",
        "C:\\Users\\HP\\DOCUME~1\\VIRTUA~1\\CD_AMA~1\\lib\\site-packages\\plotnine\\layer.py:364: PlotnineWarning: geom_point : Removed 2 rows containing missing values.\r\n",
        "<Figure Size: (479 x 479)>\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "(",
        "... ",
        "ames_test >>",
        "... ",
        "  select(_.Sale_Price, _.Sale_Price_Pred) >>",
        "... ",
        "  mutate(error = _.Sale_Price - _.Sale_Price_Pred) >>",
        "... ",
        "  ggplot(aes(x = \"error\")) +",
        "... ",
        "  geom_histogram(color = \"white\", fill = \"black\") +",
        "... ",
        "  geom_vline(xintercept = 0, color = \"red\") +",
        "... ",
        "  scale_x_continuous(labels=dollar_format(big_mark=',', digits=0)) + ",
        "... ",
        "  ylab(\"Conteos de clase\") + xlab(\"Errores\") +",
        "... ",
        "  ggtitle(\"Distribución de error\")",
        "... ",
        ")",
        "C:\\Users\\HP\\DOCUME~1\\VIRTUA~1\\CD_AMA~1\\lib\\site-packages\\plotnine\\stats\\stat_bin.py:109: PlotnineWarning: 'stat_bin()' using 'bins = 35'. Pick better value with 'binwidth'.\r\n",
        "<Figure Size: (479 x 479)>\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "(",
        "... ",
        "ames_test >>",
        "... ",
        "  select(_.Sale_Price, _.Sale_Price_Pred) >>",
        "... ",
        "  mutate(error = _.Sale_Price - _.Sale_Price_Pred) >>",
        "... ",
        "  ggplot(aes(sample = \"error\")) +",
        "... ",
        "  geom_qq(alpha = 0.3) + stat_qq_line(color = \"red\") +",
        "... ",
        "  scale_y_continuous(labels=dollar_format(big_mark=',', digits = 0)) + ",
        "... ",
        "  xlab(\"Distribución normal\") + ylab(\"Distribución de errores\") +",
        "... ",
        "  ggtitle(\"QQ-Plot\")",
        "... ",
        ")",
        "<Figure Size: (479 x 479)>\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "(",
        "... ",
        "ames_test >>",
        "... ",
        "  select(_.Sale_Price, _.Sale_Price_Pred) >>",
        "... ",
        "  mutate(error = _.Sale_Price - _.Sale_Price_Pred) >>",
        "... ",
        "  ggplot(aes(x = \"Sale_Price\")) +",
        "... ",
        "  geom_linerange(aes(ymin = 0, ymax = \"error\"), colour = \"purple\") +",
        "... ",
        "  geom_point(aes(y = \"error\"), size = 0.05, alpha = 0.5) +",
        "... ",
        "  geom_abline(intercept = 0, slope = 0) +",
        "... ",
        "  scale_x_continuous(labels=dollar_format(big_mark=',', digits=0)) + ",
        "... ",
        "  scale_y_continuous(labels=dollar_format(big_mark=',', digits=0)) +",
        "... ",
        "  xlab(\"Precio real\") + ylab(\"Error de estimación\") +",
        "... ",
        "  ggtitle(\"Relación entre error y precio de venta\")",
        "... ",
        ")",
        "<Figure Size: (479 x 479)>\r\n",
        ">>> ",
        "",
        ">>> ",
        "#### Validación cruzada ####",
        ">>> ",
        "",
        ">>> ",
        "# Definir el objeto K-Fold Cross Validator",
        ">>> ",
        "kf = KFold(n_splits=10, shuffle=True, random_state=42)",
        ">>> ",
        "",
        ">>> ",
        "# Definir las métricas de desempeño que deseas calcular como funciones de puntuación",
        ">>> ",
        "scoring = {",
        "... ",
        "    'neg_mean_squared_error': make_scorer(mean_squared_error, greater_is_better=False),",
        "... ",
        "    'r2': make_scorer(r2_score),",
        "... ",
        "    'neg_mean_absolute_error': make_scorer(mean_absolute_error, greater_is_better=False),",
        "... ",
        "    'mape': make_scorer(mean_absolute_percentage_error, greater_is_better=False)",
        "... ",
        "}",
        ">>> ",
        "",
        ">>> ",
        "# Realizar la validación cruzada y calcular métricas de desempeño utilizando cross_val_score",
        ">>> ",
        "results = cross_validate(",
        "... ",
        "  pipeline, ",
        "... ",
        "  ames_train_selected, ames_y_train,",
        "... ",
        "  cv=kf, ",
        "... ",
        "  scoring=scoring",
        "... ",
        "  )",
        ">>> ",
        "",
        ">>> ",
        "# Calcular estadísticas resumidas (media y desviación estándar) de las métricas",
        ">>> ",
        "mean_rmse = np.mean(np.sqrt(-results['test_neg_mean_squared_error']))",
        ">>> ",
        "std_rmse = np.std(np.sqrt(-results['test_neg_mean_squared_error']))",
        ">>> ",
        "",
        ">>> ",
        "mean_r2 = np.mean(results['test_r2'])",
        ">>> ",
        "std_r2 = np.std(results['test_r2'])",
        ">>> ",
        "",
        ">>> ",
        "mean_mae = np.mean(-results['test_neg_mean_absolute_error'])",
        ">>> ",
        "std_mae = np.std(-results['test_neg_mean_absolute_error'])",
        ">>> ",
        "",
        ">>> ",
        "mean_mape = np.mean(-results['test_mape'])",
        ">>> ",
        "std_mape = np.std(-results['test_mape'])",
        ">>> ",
        "",
        ">>> ",
        "λ",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'λ' is not defined\n",
        ">>> ",
        "# Imprimir los resultados",
        ">>> ",
        "print(f\"MAE: {mean_mae} +/- {std_mae}\")",
        "MAE: 42958.97707856537 +/- 2186.667908975243\r\n",
        ">>> ",
        "print(f\"MAPE: {mean_mape} +/- {std_mape}\")",
        "MAPE: 0.2533426562593809 +/- 0.014502626693255282\r\n",
        ">>> ",
        "print(f\"R^2: {mean_r2} +/- {std_r2}\")",
        "R^2: 0.38323134417308335 +/- 0.04081273638429328\r\n",
        ">>> ",
        "print(f\"RMSE: {mean_rmse} +/- {std_rmse}\")",
        "RMSE: 62294.56293716036 +/- 4103.705937898387\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "#| results: hide",
        ">>> ",
        "#| fig-keep: 'all'",
        ">>> ",
        "from mizani.formatters import comma_format, dollar_format",
        ">>> ",
        "ames_train = (X_train >> mutate(Sale_Price= y_train))",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'X_train' is not defined\n",
        ">>> ",
        "plt.figure()",
        "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nNameError: name 'plt' is not defined\n",
        ">>> ",
        "(",
        "... ",
        "    ames_train >> ggplot(aes(y='Sale_Price', x=0))+",
        "... ",
        "                geom_violin( fill='#702C27',",
        "... ",
        "                                style='right',",
        "... ",
        "                                alpha=0.6)+",
        "... ",
        "                geom_jitter(aes(x=-0.21),",
        "... ",
        "                            size=0.8,",
        "... ",
        "                            alpha=0.6,",
        "... ",
        "                            color='#8E8058',",
        "... ",
        "                            width=0.2,",
        "... ",
        "                            random_state=7)+",
        "... ",
        "                geom_boxplot(aes(x=-0.21),width=0.4,",
        "... ",
        "                                    color='#182E40',",
        "... ",
        "                                    alpha=0.1,",
        "... ",
        "                                    outlier_alpha=1,",
        "... ",
        "                                    outlier_color='#235C6C',",
        "... ",
        "                                    outlier_size=1.5)+",
        "... ",
        "                coord_flip()+",
        "... ",
        "                theme_classic()+",
        "... ",
        "                ggtitle('Distribución de los precios de venta')+",
        "... ",
        "                scale_y_continuous(labels=dollar_format(big_mark=','))+",
        "... ",
        "                ylab('Precio de venta')+",
        "... ",
        "                theme(axis_ticks_minor_y=element_blank(),",
        "... ",
        "                        axis_ticks_major_y=element_blank(),",
        "... ",
        "                        axis_text_y=element_blank()",
        "... ",
        "                        )+",
        "... ",
        "                theme(figure_size=(8, 6))",
        "... ",
        ")",
        "Traceback (most recent call last):\n  File \"<string>\", line 2, in <module>\nNameError: name 'ames_train' is not defined\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "#| label: load-py-packages",
        ">>> ",
        "#| include: false",
        ">>> ",
        "",
        ">>> ",
        "import pandas as pd",
        ">>> ",
        "from siuba import *",
        ">>> ",
        "import numpy as np",
        ">>> ",
        "from plotnine import *",
        ">>> ",
        "import plydata as pr",
        ">>> ",
        "from plydata.tidy import pivot_wider, pivot_longer",
        ">>> ",
        "import matplotlib.pyplot as plt",
        ">>> ",
        "import seaborn as sns",
        ">>> ",
        "",
        ">>> ",
        "#| label: intial_split",
        ">>> ",
        "from sklearn.model_selection import train_test_split, LeaveOneOut, cross_val_score, KFold",
        ">>> ",
        "from sklearn.linear_model import LinearRegression",
        ">>> ",
        "",
        ">>> ",
        "ames = pd.read_csv(\"../data/ames.csv\")",
        ">>> ",
        "print(\"Tamaño de conjunto completo: \", ames.shape)",
        "Tamaño de conjunto completo:  (2930, 74)\r\n",
        ">>> ",
        "",
        ">>> ",
        "y = ames >> pull(\"Sale_Price\")",
        ">>> ",
        "X = select(ames, -_.Sale_Price)",
        ">>> ",
        "",
        ">>> ",
        "numeric_column = ames >> pull(\"Sale_Price\")",
        ">>> ",
        "quartiles = np.percentile(numeric_column, [25, 50, 75])",
        ">>> ",
        "",
        ">>> ",
        "# Crea una nueva variable categórica basada en los cuartiles",
        ">>> ",
        "stratify_variable = pd.cut(",
        "... ",
        " numeric_column, ",
        "... ",
        " bins=[float('-inf'), quartiles[0], quartiles[1], quartiles[2], float('inf')],",
        "... ",
        " labels=[\"Q1\", \"Q2\", \"Q3\", \"Q4\"]",
        "... ",
        " )",
        ">>> ",
        "",
        ">>> ",
        "X_train, X_test, y_train, y_test = train_test_split(",
        "... ",
        " X, y, ",
        "... ",
        " test_size = 0.20, ",
        "... ",
        " random_state = 12345, ",
        "... ",
        " stratify = stratify_variable",
        "... ",
        " )",
        ">>> ",
        "",
        ">>> ",
        "#| results: hide",
        ">>> ",
        "#| fig-keep: 'all'",
        ">>> ",
        "from mizani.formatters import comma_format, dollar_format",
        ">>> ",
        "ames_train = (X_train >> mutate(Sale_Price= y_train))",
        ">>> ",
        "plt.figure()",
        "<Figure size 640x480 with 0 Axes>\r\n",
        ">>> ",
        "(",
        "... ",
        "    ames_train >> ggplot(aes(y='Sale_Price', x=0))+",
        "... ",
        "                geom_violin( fill='#702C27',",
        "... ",
        "                                style='right',",
        "... ",
        "                                alpha=0.6)+",
        "... ",
        "                geom_jitter(aes(x=-0.21),",
        "... ",
        "                            size=0.8,",
        "... ",
        "                            alpha=0.6,",
        "... ",
        "                            color='#8E8058',",
        "... ",
        "                            width=0.2,",
        "... ",
        "                            random_state=7)+",
        "... ",
        "                geom_boxplot(aes(x=-0.21),width=0.4,",
        "... ",
        "                                    color='#182E40',",
        "... ",
        "                                    alpha=0.1,",
        "... ",
        "                                    outlier_alpha=1,",
        "... ",
        "                                    outlier_color='#235C6C',",
        "... ",
        "                                    outlier_size=1.5)+",
        "... ",
        "                coord_flip()+",
        "... ",
        "                theme_classic()+",
        "... ",
        "                ggtitle('Distribución de los precios de venta')+",
        "... ",
        "                scale_y_continuous(labels=dollar_format(big_mark=','))+",
        "... ",
        "                ylab('Precio de venta')+",
        "... ",
        "                theme(axis_ticks_minor_y=element_blank(),",
        "... ",
        "                        axis_ticks_major_y=element_blank(),",
        "... ",
        "                        axis_text_y=element_blank()",
        "... ",
        "                        )+",
        "... ",
        "                theme(figure_size=(8, 6))",
        "... ",
        ")",
        "<Figure Size: (633 x 391)>\r\n",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "",
        ">>> ",
        "#| label: load-py-packages",
        ">>> ",
        "#| include: false",
        ">>> ",
        "",
        ">>> ",
        "import pandas as pd",
        ">>> ",
        "from siuba import *",
        ">>> ",
        "import numpy as np",
        ">>> ",
        "from plotnine import *",
        ">>> ",
        "import plydata as pr",
        ">>> ",
        "from plydata.tidy import pivot_wider, pivot_longer",
        ">>> ",
        "import matplotlib.pyplot as plt",
        ">>> ",
        "import seaborn as sns",
        ">>> ",
        "",
        ">>> ",
        "pull(\"Sale_Price\")",
        "<plydata.one_table_verbs.pull object at 0x000002009E374EB0>\r\n",
        ">>> ",
        "",
        ">>> ",
        "ames >> pull(\"Sale_Price\")",
        "array([215000, 105000, 172000, ..., 132000, 170000, 188000], dtype=int64)\r\n",
        ">>> ",
        "",
        "\nRestarting R session...\n\n"
    ]
}