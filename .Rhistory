_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s, _.p_val)
).head(60)
model.summary()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) * ames_x_test.Gr_Liv_Area
ames_test = (
ames_x_test >> mutate(
Sale_Price_Pred = y_pred,
Sale_Price =Sale_Price_test
)
>> select (_.contains('Sale_Price'))
)
##### Métricas de desempeño
y_obs = ames_test["Sale_Price"]
y_pred = ames_test["Sale_Price_Pred"]
predictores = transformed_df.columns.to_list()
mtrcs_dt =get_metrics(y_pred, y_obs,predictors= len(transformed_df.columns ))
print(metrics_df)
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
preprocessor_2=ColumnTransformer(
transformers=[
("selector", "drop", drop_cols),
('interaction_1', interaction_transformer_wb, ['Lot_Area', 'Gr_Liv_Area']),
('interactions2', interaction_transformer, ['Year_Built', 'Overall_Cond_Average']),
('interactions3', interaction_transformer, ['Garage_Area', 'Bedroom_AbvGr']),
('interactions3.1', interaction_transformer, ['House_Style_SLvl', 'Overall_Cond_Fair']),
('interactions3.4', interaction_transformer, ['wood_prop', 'Mas_Vnr_Area']),
('interactions3.2', interaction_transformer, ['Garage_Type_Basment', 'BsmtFin_SF_1']),
('interactions3.5', interaction_transformer, ['BsmtFin_SF_1', 'BsmtFin_Type_2_Unf']),
('interactions4', interaction_transformer, ['Misc_Val', 'Misc_Feature_TenC'])
],
verbose_feature_names_out = False,
remainder='passthrough'
).set_output(transform = 'pandas')
pipeline = Pipeline([
('preprocessor', preprocessor_1),
('select_interac', preprocessor_2),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
fitt={'variable' : ['intercept']+list(pipeline.named_steps['regressor'].feature_names_in_),
'coef' :[pipeline.named_steps['regressor'].intercept_ ]+list(pipeline.named_steps['regressor'].coef_)}
coefs_reg =pd.DataFrame(fitt)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(-10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
abs(-10)
##### Extracción de coeficientes
transformed_df = pipeline.named_steps['select_interac'].transform(pipeline.named_steps['preprocessor'].transform(ames_x_train))
X_train_with_intercept = sm.add_constant(transformed_df)
model = sm.OLS(ames_y_train, X_train_with_intercept).fit()
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s, _.p_val)
).head(60)
model.summary()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) * ames_x_test.Gr_Liv_Area
ames_test = (
ames_x_test >> mutate(
Sale_Price_Pred = y_pred,
Sale_Price =Sale_Price_test
)
>> select (_.contains('Sale_Price'))
)
##### Métricas de desempeño
y_obs = ames_test["Sale_Price"]
y_pred = ames_test["Sale_Price_Pred"]
predictores = transformed_df.columns.to_list()
mtrcs_dt =get_metrics(y_pred, y_obs,predictors= len(transformed_df.columns ))
print(metrics_df)
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
drop_cols=['Neighborhood_Crawford',
'Neighborhood_infrequent_sklearn',
'BsmtFin_Type_1_BLQ',
'Exter_Cond_Good',
'Neighborhood_Northridge',
'Condition_1_RRAe',
'Electrical_FuseF',
'Misc_Val',
'Garage_Type_No_Garage',
'Condition_1_Feedr',
'Bsmt_Full_Bath',
'Bsmt_Half_Bath',
'Fence_infrequent_sklearn',
'Foundation_CBlock',
'MS_SubClass_Two_Story_1946_and_Newer',
'Garage_Finish_No_Garage',
'Bldg_Type_TwoFmCon',
'Mo_Sold_5',
'Paved_Drive_Partial_Pavement',
'Bsmt_Cond_Typical',
'Heating_QC_Fair',
'BsmtFin_Type_1_Unf',
'Electrical_SBrkr',
'Fence_Good_Wood',
'Mo_Sold_4',
'Garage_Type_Detchd',
'Foundation_Slab',
'House_Style_infrequent_sklearn',
'Three_season_porch',
'BsmtFin_Type_2_GLQ',
'Mo_Sold_7',
'Misc_Val',
'BsmtFin_Type_1_No_Basement',
'Foundation_PConc',
'Mo_Sold_12',
'Mo_Sold_10',
'BsmtFin_Type_2_No_Basement',
'last_remod',
'Bsmt_Cond_No_Basement',
'Condition_2_infrequent_sklearn',
'Exter_Cond_Typical',
'Misc_Val',
'Bldg_Type_OneFam',
'Mo_Sold_9',
'House_Style_SFoyer',
'Misc_Feature_nan',
'Electrical_infrequent_sklearn',
'Bsmt_Cond_infrequent_sklearn',
'House_Style_One_and_Half_Fin',
'Bsmt_Cond_Good',
'area_per_car',
'Mas_Vnr_Type_nan',
'Foundation_infrequent_sklearn',
'Bldg_Type_TwnhsE',
'Fence_No_Fence']
preprocessor_2=ColumnTransformer(
transformers=[
("selector", "drop", drop_cols),
('interaction_1', interaction_transformer_wb, ['Lot_Area', 'Gr_Liv_Area']),
('interactions2', interaction_transformer, ['Year_Built', 'Overall_Cond_Average']),
('interactions3', interaction_transformer, ['Garage_Area', 'Bedroom_AbvGr']),
('interactions3.1', interaction_transformer, ['House_Style_SLvl', 'Overall_Cond_Fair']),
('interactions3.4', interaction_transformer, ['wood_prop', 'Mas_Vnr_Area']),
('interactions3.2', interaction_transformer, ['Garage_Type_Basment', 'BsmtFin_SF_1']),
('interactions3.5', interaction_transformer, ['BsmtFin_SF_1', 'BsmtFin_Type_2_Unf']),
('interactions4', interaction_transformer, ['Misc_Val', 'Misc_Feature_TenC'])
],
verbose_feature_names_out = False,
remainder='passthrough'
).set_output(transform = 'pandas')
pipeline = Pipeline([
('preprocessor', preprocessor_1),
('select_interac', preprocessor_2),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
fitt={'variable' : ['intercept']+list(pipeline.named_steps['regressor'].feature_names_in_),
'coef' :[pipeline.named_steps['regressor'].intercept_ ]+list(pipeline.named_steps['regressor'].coef_)}
coefs_reg =pd.DataFrame(fitt)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(-10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
abs(-10)
##### Extracción de coeficientes
transformed_df = pipeline.named_steps['select_interac'].transform(pipeline.named_steps['preprocessor'].transform(ames_x_train))
X_train_with_intercept = sm.add_constant(transformed_df)
model = sm.OLS(ames_y_train, X_train_with_intercept).fit()
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s, _.p_val)
).head(60)
model.summary()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) * ames_x_test.Gr_Liv_Area
ames_test = (
ames_x_test >> mutate(
Sale_Price_Pred = y_pred,
Sale_Price =Sale_Price_test
)
>> select (_.contains('Sale_Price'))
)
##### Métricas de desempeño
y_obs = ames_test["Sale_Price"]
y_pred = ames_test["Sale_Price_Pred"]
predictores = transformed_df.columns.to_list()
mtrcs_dt =get_metrics(y_pred, y_obs,predictors= len(transformed_df.columns ))
print(metrics_df)
preprocessor_2=ColumnTransformer(
transformers=[
("selector", "drop", drop_cols),
('interaction_1', interaction_transformer_wb, ['Lot_Area', 'Gr_Liv_Area']),
('interactions2', interaction_transformer, ['Year_Built', 'Overall_Cond_Average']),
('interactions3', interaction_transformer, ['Garage_Area', 'Bedroom_AbvGr']),
('interactions3.1', interaction_transformer, ['House_Style_SLvl', 'Overall_Cond_Fair']),
('interactions3.4', interaction_transformer, ['wood_prop', 'Mas_Vnr_Area']),
('interactions3.2', interaction_transformer, ['Garage_Type_Basment', 'BsmtFin_SF_1']),
('interactions3.5', interaction_transformer, ['BsmtFin_SF_1', 'First_Flr_SF']),
('interactions4', interaction_transformer, ['Misc_Val', 'Misc_Feature_TenC'])
],
verbose_feature_names_out = False,
remainder='passthrough'
).set_output(transform = 'pandas')
pipeline = Pipeline([
('preprocessor', preprocessor_1),
('select_interac', preprocessor_2),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
fitt={'variable' : ['intercept']+list(pipeline.named_steps['regressor'].feature_names_in_),
'coef' :[pipeline.named_steps['regressor'].intercept_ ]+list(pipeline.named_steps['regressor'].coef_)}
coefs_reg =pd.DataFrame(fitt)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(-10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
abs(-10)
##### Extracción de coeficientes
transformed_df = pipeline.named_steps['select_interac'].transform(pipeline.named_steps['preprocessor'].transform(ames_x_train))
X_train_with_intercept = sm.add_constant(transformed_df)
model = sm.OLS(ames_y_train, X_train_with_intercept).fit()
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s, _.p_val)
).head(60)
model.summary()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) * ames_x_test.Gr_Liv_Area
ames_test = (
ames_x_test >> mutate(
Sale_Price_Pred = y_pred,
Sale_Price =Sale_Price_test
)
>> select (_.contains('Sale_Price'))
)
##### Métricas de desempeño
y_obs = ames_test["Sale_Price"]
y_pred = ames_test["Sale_Price_Pred"]
predictores = transformed_df.columns.to_list()
mtrcs_dt =get_metrics(y_pred, y_obs,predictors= len(transformed_df.columns ))
print(metrics_df)
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
transformed_df
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s, _.p_val)
)
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (-_.s, _.p_val)
)
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s,- _.p_val)
)
preprocessor_2=ColumnTransformer(
transformers=[
("selector", "drop", drop_cols),
('interaction_1', interaction_transformer_wb, ['Lot_Area', 'Gr_Liv_Area']),
('interactions2', interaction_transformer, ['Year_Built', 'Overall_Cond_Average']),
('interactions3', interaction_transformer, ['Garage_Area', 'Bedroom_AbvGr']),
('interactions3.1', interaction_transformer, ['House_Style_SLvl', 'Overall_Cond_Fair']),
('interactions3.4', interaction_transformer, ['wood_prop', 'Mas_Vnr_Area']),
# ('interactions3.2', interaction_transformer, ['Garage_Type_Basment', 'BsmtFin_SF_1']),
('interactions3.5', interaction_transformer, ['BsmtFin_SF_1', 'First_Flr_SF']),
('interactions4', interaction_transformer, ['Misc_Val', 'Misc_Feature_TenC'])
],
verbose_feature_names_out = False,
remainder='passthrough'
).set_output(transform = 'pandas')
pipeline = Pipeline([
('preprocessor', preprocessor_1),
('select_interac', preprocessor_2),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
fitt={'variable' : ['intercept']+list(pipeline.named_steps['regressor'].feature_names_in_),
'coef' :[pipeline.named_steps['regressor'].intercept_ ]+list(pipeline.named_steps['regressor'].coef_)}
coefs_reg =pd.DataFrame(fitt)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(-10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
abs(-10)
##### Extracción de coeficientes
transformed_df = pipeline.named_steps['select_interac'].transform(pipeline.named_steps['preprocessor'].transform(ames_x_train))
X_train_with_intercept = sm.add_constant(transformed_df)
model = sm.OLS(ames_y_train, X_train_with_intercept).fit()
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s,- _.p_val)
)
model.summary()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) * ames_x_test.Gr_Liv_Area
ames_test = (
ames_x_test >> mutate(
Sale_Price_Pred = y_pred,
Sale_Price =Sale_Price_test
)
>> select (_.contains('Sale_Price'))
)
##### Métricas de desempeño
y_obs = ames_test["Sale_Price"]
y_pred = ames_test["Sale_Price_Pred"]
predictores = transformed_df.columns.to_list()
mtrcs_dt =get_metrics(y_pred, y_obs,predictors= len(transformed_df.columns ))
print(metrics_df)
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
preprocessor_2=ColumnTransformer(
transformers=[
("selector", "drop", drop_cols),
('interaction_1', interaction_transformer_wb, ['Lot_Area', 'Gr_Liv_Area']),
('interactions2', interaction_transformer, ['Year_Built', 'Overall_Cond_Average']),
('interactions3', interaction_transformer, ['Garage_Area', 'Bedroom_AbvGr']),
# ('interactions3.1', interaction_transformer, ['House_Style_SLvl', 'Overall_Cond_Fair']),
('interactions3.4', interaction_transformer, ['wood_prop', 'Mas_Vnr_Area']),
# ('interactions3.2', interaction_transformer, ['Garage_Type_Basment', 'BsmtFin_SF_1']),
('interactions3.5', interaction_transformer, ['BsmtFin_SF_1', 'First_Flr_SF']),
('interactions4', interaction_transformer, ['Misc_Val', 'Misc_Feature_TenC'])
],
verbose_feature_names_out = False,
remainder='passthrough'
).set_output(transform = 'pandas')
pipeline = Pipeline([
('preprocessor', preprocessor_1),
('select_interac', preprocessor_2),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
fitt={'variable' : ['intercept']+list(pipeline.named_steps['regressor'].feature_names_in_),
'coef' :[pipeline.named_steps['regressor'].intercept_ ]+list(pipeline.named_steps['regressor'].coef_)}
coefs_reg =pd.DataFrame(fitt)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
(
coefs_reg
>> filter (_.variable != 'intercept')
>> mutate( av = abs(_.coef) , m= _.av.max() , coef2=_.coef/_.m)
>> top_n(-10, abs(_.coef2) )
>> ggplot(aes(x='reorder(variable,coef2)', y='coef'))
+ geom_col()
+ coord_flip()
#
)
abs(-10)
##### Extracción de coeficientes
transformed_df = pipeline.named_steps['select_interac'].transform(pipeline.named_steps['preprocessor'].transform(ames_x_train))
X_train_with_intercept = sm.add_constant(transformed_df)
model = sm.OLS(ames_y_train, X_train_with_intercept).fit()
(
model.pvalues.reset_index()
>> select( _.var == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''})
)
>> arrange (_.s,- _.p_val)
)
model.summary()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) * ames_x_test.Gr_Liv_Area
ames_test = (
ames_x_test >> mutate(
Sale_Price_Pred = y_pred,
Sale_Price =Sale_Price_test
)
>> select (_.contains('Sale_Price'))
)
##### Métricas de desempeño
y_obs = ames_test["Sale_Price"]
y_pred = ames_test["Sale_Price_Pred"]
predictores = transformed_df.columns.to_list()
mtrcs_dt =get_metrics(y_pred, y_obs,predictors= len(transformed_df.columns ))
print(metrics_df)
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
