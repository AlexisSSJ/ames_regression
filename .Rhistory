rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
importances_df
rf_model = pipeline.named_steps['regressor'].best_estimator_
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
y_pred = rf_pipe.predict(ames_x_val)
get_metrics(y_pred, Sale_Price_validation, predictors=50)
rf_model = RandomForestRegressor(n_estimators = 750,criterion =  "friedman_mse",n_jobs=7, max_depth=7, max_features=9, min_samples_leaf=3,min_samples_split=4, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
y_pred = rf_pipe.predict(ames_x_val)
get_metrics(y_pred, Sale_Price_validation, predictors=50)
rf_model = RandomForestRegressor(n_estimators = 500,n_jobs=7, max_depth=7, max_features=9, min_samples_leaf=3,min_samples_split=4, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
rf_model = RandomForestRegressor(n_estimators = 2000,n_jobs=7, max_depth=7, max_features=9, min_samples_leaf=3,min_samples_split=4, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
rf_model = RandomForestRegressor(n_estimators = 150,n_jobs=7, max_depth=7, max_features=9, min_samples_leaf=3,min_samples_split=4, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
rf_model = RandomForestRegressor(n_estimators = 150,n_jobs=7, max_depth=10, max_features=9, min_samples_leaf=3,min_samples_split=4, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
cv_results
cv_results >> top_n(10, _.mean_test_r2)
cv_results >> top_n(10, _.mean_test_r2) >>select(-_.contains("split._"), -_.contains("time"), -_.params)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_r2")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_r2")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_mse")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
cv_results
cv_results.info()
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_r2")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_mean_squared_error")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_r2")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_mean_squared_error")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_r2")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "-mean_test_neg_mean_squared_error")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_r2")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "-mean_test_neg_mean_squared_error")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs MSE")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "mean_test_r2")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("R^2 promedio") +
ggtitle("Parametrización de Random Forest vs R^2")
)
(
cv_results >> top_n(10, _.mean_test_r2) >>
select(-_.contains("split._"), -_.contains("time"), -_.params)>>
pivot_longer(
cols = ["param_max_depth", "param_max_features", "param_min_samples_leaf", "param_min_samples_split"],
names_to="parameter",
values_to="value") >>
ggplot(aes(x = "value", y = "-mean_test_neg_mean_squared_error")) +
geom_point(size = 0.7, alpha = 0.5) +
facet_wrap("~parameter", scales = "free_x") +
xlab("Parameter value") +
ylab("MSE promedio") +
ggtitle("Parametrización de Random Forest vs MSE")
)
rf_model = RandomForestRegressor(n_estimators = 150,n_jobs=7, max_depth=7, max_features=9, min_samples_leaf=3,min_samples_split=7, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
rf_model = RandomForestRegressor(n_estimators = 150,n_jobs=7, max_depth=7, max_features=9, min_samples_leaf=3,min_samples_split=9, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
y_pred = rf_pipe.predict(ames_x_val)
get_metrics(y_pred, Sale_Price_validation, predictors=50)
selector = ColumnTransformer(
[('select', 'passthrough', bm_features)],
verbose_feature_names_out= False,
remainder = 'drop'
).set_output(transform='pandas')
rf_model = RandomForestRegressor(n_estimators = 350,criterion =  "friedman_mse",n_jobs=7, max_depth=13, max_features=7, min_samples_leaf=3,min_samples_split=6, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_val)
get_metrics(y_pred, Sale_Price_validation, predictors=50)
idf.to_csv('idf_rf.csv')
idf=pd.read_csv('idf_rf.csv')
importance_df = pd.read_csv('importance_rf_1.csv')
idf=pd.read_csv('idf_rf.csv')
(
idf
# >> filter(_.predictors<150)
>> pivot_longer(
cols=['MSE','R2_adj' ],names_to='variables', values_to='value'
)
>> ggplot(aes(x ='predictors', y='value'))
+  geom_point(alpha = 0.5)
+  facet_wrap('~variables', ncol=1, scales ='free_y')
)
(
idf
>> filter(_.predictors<80)
>> pivot_longer(
cols=['MSE','R2_adj' ],names_to='variables', values_to='value'
)
>> ggplot(aes(x ='predictors', y='value'))
+  geom_point(alpha = 0.5)
+  geom_smooth(span=.3)
+  facet_wrap('~variables', ncol=1, scales ='free_y')
)
pd.options.display.float_format = '{:.4f}'.format
(
idf
>> select(-_.vars)
>> mutate (MSE = _.MSE.round(2), R2_adj = _.R2_adj.round(3))
>> top_n(10, _.R2_adj)
>> arrange(_.R2_adj, -_.MSE)
)
#| label: bm_f_rf
bm_features = (
idf       >> filter(_.predictors ==50 )
>> pull('vars')
)[0]
selector = ColumnTransformer(
[('select', 'passthrough', bm_features)],
verbose_feature_names_out= False,
remainder = 'drop'
).set_output(transform='pandas')
rf_model = RandomForestRegressor(n_estimators = 350,criterion =  "friedman_mse",n_jobs=7, max_depth=13, max_features=7, min_samples_leaf=3,min_samples_split=6, random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
selector = ColumnTransformer(
[('select', 'passthrough', bm_features)],
verbose_feature_names_out= False,
remainder = 'drop'
).set_output(transform='pandas')
rf_model = RandomForestRegressor(
n_estimators = 350,
n_jobs=7,
max_depth=13,
max_features=7,
min_samples_leaf=3,
min_samples_split=6,
random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
selector = ColumnTransformer(
[('select', 'passthrough', bm_features)],
verbose_feature_names_out= False,
remainder = 'drop'
).set_output(transform='pandas')
rf_model = RandomForestRegressor(
n_estimators = 350,
n_jobs=7,
max_depth=13,
max_features=7,
min_samples_leaf=3,
min_samples_split=6,
random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].features_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
bm_features
#| label: bm_f_rf
bm_features = ['Neighborhood_Stone_Brook', 'Land_Contour_Low', 'Lot_Shape_Regular', 'BsmtFin_Type_1_Unf', 'Neighborhood_Northridge_Heights', 'Overall_Cond_Excellent', 'BsmtFin_Type_1_No_Basement', 'Paved_Drive_Paved', 'Garage_Type_Detchd', 'Bldg_Type_OneFam', 'House_Style_Two_Story', 'Garage_Finish_Unf', 'Garage_Cond_Typical', 'Heating_QC_Typical', 'Bsmt_Exposure_No', 'Kitchen_AbvGr', 'MS_Zoning_Residential_Low_Density', 'Central_Air_Y', 'Bedroom_AbvGr', 'MS_SubClass_Two_Story_1946_and_Newer', 'Half_Bath', 'Neighborhood_Crawford', 'Bsmt_Unf_SF', 'Foundation_CBlock', 'BsmtFin_SF_1', 'Bsmt_Exposure_Gd', 'Longitude', 'Roof_Style_Hip', 'Lot_Frontage', 'Wood_Deck_SF', 'BsmtFin_Type_1_GLQ', 'Bsmt_Full_Bath', 'Roof_Style_Gable', 'Full_Bath', 'Open_Porch_SF', 'Second_Flr_SF', 'Foundation_PConc', 'Mas_Vnr_Area', 'TotRms_AbvGrd', 'Fireplaces', 'Year_Remod_Add', 'Lot_Area', 'Latitude', 'Garage_Area', 'Year_Built', 'Garage_Cars', 'First_Flr_SF', 'last_remod', 'Total_Bsmt_SF', 'Gr_Liv_Area']
# (
#   idf       >> filter(_.predictors ==50 )
#             >> pull('vars')
# )[0]
selector = ColumnTransformer(
[('select', 'passthrough', bm_features)],
verbose_feature_names_out= False,
remainder = 'drop'
).set_output(transform='pandas')
rf_model = RandomForestRegressor(
n_estimators = 350,
n_jobs=7,
max_depth=13,
max_features=7,
min_samples_leaf=3,
min_samples_split=6,
random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].features_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
selector = ColumnTransformer(
[('select', 'passthrough', bm_features)],
verbose_feature_names_out= False,
remainder = 'drop'
).set_output(transform='pandas')
rf_model = RandomForestRegressor(
n_estimators = 350,
n_jobs=7,
max_depth=13,
max_features=7,
min_samples_leaf=3,
min_samples_split=6,
random_state=8)
rf_pipe = Pipeline([
('preprocesado', prep),
('selector', selector),
('rf', rf_model)
])
rf_pipe.fit(ames_x_train, Sale_Price_train)
importances_df = pd.DataFrame({"Variable" : rf_pipe.named_steps['rf'].feature_names_in_ ,
"Importancia" : rf_pipe.named_steps['rf'].feature_importances_})
(
importances_df >>
ggplot(aes(x = 'reorder(Variable, Importancia)', y = "Importancia")) +
geom_point(alpha = 0.65) +
coord_flip()
)
y_pred = rf_pipe.predict(ames_x_test)
get_metrics(y_pred, Sale_Price_test, predictors=50)
