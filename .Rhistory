_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''}))
>> arrange (_.s,- _.p_val)
>>left_join(_, coefs, on = 'variable')
)
p_vals >> top_n(20,_.p_val) >> select (_.coefs, _.p_val,_.s,_.variable)
model.summary2()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) *ames_x_test.Gr_Liv_Area
y_obs = Sale_Price_test
##### Métricas de desempeño
predictores = transformed_df.columns.to_list()
get_metrics(y_pred, y_obs,predictors= len(predictores) )
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
## drop cols
drop_cols=['Alley_Pave', '3Ssn_Porch',
'Bldg_Type_2fmCon', 'House_Style_1Story',
'BsmtFin_Type_1_BLQ','BsmtFin_Type_1_Unf','MS_Zoning_RL',
'Garage_Qual_No_Garage','Bsmt_Qual_No_Basement',
'BsmtFin_Type_2_BLQ','Heating_QC_infrequent_sklearn',
'BsmtFin_Type_2_BLQ',
'BsmtFin_Type_2_Rec','BsmtFin_Type_1_LwQ',
'Bsmt_Cond_infrequent_sklearn',
'Bsmt_Exposure_Mn',
'Bsmt_Full_Bath','Overall_Qual_Poor_x_1s_Floor_prop_c_',
'Bsmt_Half_Bath','Garage_Qual_infrequent_sklearn',
'Condition_1_Feedr',
'Condition_2_infrequent_sklearn',
'Electrical_FuseF','BsmtFin_SF_2',
'Electrical_FuseF','Lot_Config_FR2',
'Electrical_SBrkr','BsmtFin_Type_2_Unf',
'Electrical_infrequent_sklearn',
'Exter_Cond_Gd','Lot_Area',
'Exter_Cond_TA','Bsmt_Cond_TA',
'Fireplace_Qu_infrequent_sklearn',
'Foundation_CBlock', 'Central_Air_Y',
'Foundation_CBlock','Neighborhood_Crawfor',
'Foundation_PConc','Bsmt_Cond_Gd',
'Foundation_infrequent_sklearn',
'Functional_Min2','Mo_Sold','Garage_Yr_Blt',
'Functional_infrequent_sklearn',
'Garage_Cars','Bedroom_AbvGr', 'Neighborhood_NridgHt',
'Garage_Cond_infrequent_sklearn',
'Garage_Qual_No_Garage_x_Garage_Prop_overGLA_c_',
'Garage_Type_BuiltIn', 'Fireplace_Qu_infrequent_sklearn_x_Fireplaces',
'Garage_Type_Detchd','Bsmt_Unf_SF',
'Garage_Type_infrequent_sklearn', 'Bsmt_Exposure_No',
'Garage_Type_infrequent_sklearn', 'Bldg_Type_Twnhs',
'Heating_QC_Gd','Fireplace_Qu_No_Fireplace_x_Fireplaces',
'House_Style_SFoyer','Bsmt_Qual_Gd','BsmtFin_Type_2_LwQ',
'House_Style_SLvl','Roof_Style_infrequent_sklearn','Fireplace_Qu_TA_x_Fireplaces',
'House_Style_infrequent_sklearn', 'Neighborhood_Somerst',
'Kitchen_Qual_infrequent_sklearn_x_Kitchen_AbvGr',
'Kitchen_Qual_infrequent_sklearn','Screen_Porch',
'Heating_infrequent_sklearn', 'Fireplace_Qu_Gd_x_Fireplaces','Garage_Cond_TA',
'Lot_Config_CulDSac', 'House_Style_2Story','Garage_Prop_overGLA_c_',
'Lot_Config_infrequent_sklearn','Total_Bsmt_SF',
'Lot_Shape_infrequent_sklearn', 'Lot_Shape_Reg',
'Lot_Shape_IR2', 'Lot_Config_Inside', 'Enclosed_Porch',
'Lot_Frontage', 'Heating_QC_Fa','Garage_Qual_infrequent_sklearn_x_Garage_Prop_overGLA_c_',
'Mas_Vnr_Area','Paved_Drive_P', 'Foundation_Slab',
'Mas_Vnr_Type_None', 'Open_Porch_SF','BsmtFin_Type_1_Rec',
'Misc_Val','Area_p_car_c_', 'Misc_Feature_Shed', 'Garage_Yr_Blt',
'MS_SubClass','Bsmt_Qual_No_Basement_x_Bsmt_Prop_c_',
'Neighborhood_NoRidge', 'MS_Zoning_infrequent_sklearn',
'Neighborhood_infrequent_sklearn','Paved_Drive_Y',
'Street_infrequent_sklearn',
'Utilities_infrequent_sklearn']
## end
step_rm =ColumnTransformer(
[('TO_DROP', 'drop', drop_cols )],
verbose_feature_names_out = False,
remainder='passthrough').set_output(transform = 'pandas')
pipeline = Pipeline([
('clean_data', clean_and_imputers),
('feat_eng', feature_eng),
('preprocessor', preprocessor_1),
('interactions', interactions),
# ('interactions_2nd_round', interactions_2nd),
('remove', step_rm),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
transformed_df = step_rm.fit_transform(interactions.fit_transform(prep_df))
##### Extracción de coeficientes
coefs = pd.DataFrame({
'variable':transformed_df.columns.to_list(),
'coefs': pipeline.named_steps['regressor'].coef_.round(5)
})
model = sm.OLS(ames_y_train, sm.add_constant(transformed_df) ).fit()
p_vals = (
model.pvalues.reset_index()
>> select( _.variable == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''}))
>> arrange (_.s,- _.p_val)
>>left_join(_, coefs, on = 'variable')
)
p_vals >> top_n(20,_.p_val) >> select (_.coefs, _.p_val,_.s,_.variable)
model.summary2()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) *ames_x_test.Gr_Liv_Area
y_obs = Sale_Price_test
##### Métricas de desempeño
predictores = transformed_df.columns.to_list()
get_metrics(y_pred, y_obs,predictors= len(predictores) )
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
drop_cols=['Alley_Pave', '3Ssn_Porch',
'Bldg_Type_2fmCon', 'House_Style_1Story',
'BsmtFin_Type_1_BLQ','BsmtFin_Type_1_Unf','MS_Zoning_RL',
'Garage_Qual_No_Garage','Bsmt_Qual_No_Basement',
'BsmtFin_Type_2_BLQ','Heating_QC_infrequent_sklearn',
'BsmtFin_Type_2_BLQ',
'BsmtFin_Type_2_Rec','BsmtFin_Type_1_LwQ',
'Bsmt_Cond_infrequent_sklearn',
'Bsmt_Exposure_Mn',
'Bsmt_Full_Bath','Overall_Qual_Poor_x_1s_Floor_prop_c_',
'Bsmt_Half_Bath','Garage_Qual_infrequent_sklearn',
'Condition_1_Feedr',
'Condition_2_infrequent_sklearn',
'Electrical_FuseF','BsmtFin_SF_2',
'Electrical_FuseF','Lot_Config_FR2',
'Electrical_SBrkr','BsmtFin_Type_2_Unf',
'Electrical_infrequent_sklearn',
'Exter_Cond_Gd','Lot_Area',
'Exter_Cond_TA','Bsmt_Cond_TA',
'Fireplace_Qu_infrequent_sklearn',
'Foundation_CBlock', 'Central_Air_Y',
'Foundation_CBlock','Neighborhood_Crawfor',
'Foundation_PConc','Bsmt_Cond_Gd',
'Foundation_infrequent_sklearn',
'Functional_Min2','Mo_Sold','Garage_Yr_Blt',
'Functional_infrequent_sklearn',
'Garage_Cars','Bedroom_AbvGr', 'Neighborhood_NridgHt',
'Garage_Cond_infrequent_sklearn',
'Garage_Qual_No_Garage_x_Garage_Prop_overGLA_c_',
'Garage_Type_BuiltIn', 'Fireplace_Qu_infrequent_sklearn_x_Fireplaces',
'Garage_Type_Detchd','Bsmt_Unf_SF',
'Garage_Type_infrequent_sklearn', 'Bsmt_Exposure_No',
'Garage_Type_infrequent_sklearn', 'Bldg_Type_Twnhs',
'Heating_QC_Gd','Fireplace_Qu_No_Fireplace_x_Fireplaces',
'House_Style_SFoyer','Bsmt_Qual_Gd','BsmtFin_Type_2_LwQ',
'House_Style_SLvl','Roof_Style_infrequent_sklearn','Fireplace_Qu_TA_x_Fireplaces',
'House_Style_infrequent_sklearn', 'Neighborhood_Somerst','Fireplace_Qu_Po_x_Fireplaces',
'Kitchen_Qual_infrequent_sklearn_x_Kitchen_AbvGr',
'Kitchen_Qual_infrequent_sklearn','Screen_Porch',
'Heating_infrequent_sklearn', 'Fireplace_Qu_Gd_x_Fireplaces','Garage_Cond_TA',
'Lot_Config_CulDSac', 'House_Style_2Story','Garage_Prop_overGLA_c_',
'Lot_Config_infrequent_sklearn','Total_Bsmt_SF',
'Lot_Shape_infrequent_sklearn', 'Lot_Shape_Reg',
'Lot_Shape_IR2', 'Lot_Config_Inside', 'Enclosed_Porch',
'Lot_Frontage', 'Heating_QC_Fa','Garage_Qual_infrequent_sklearn_x_Garage_Prop_overGLA_c_',
'Mas_Vnr_Area','Paved_Drive_P', 'Foundation_Slab',
'Mas_Vnr_Type_None', 'Open_Porch_SF','BsmtFin_Type_1_Rec',
'Misc_Val','Area_p_car_c_', 'Misc_Feature_Shed', 'Garage_Yr_Blt',
'MS_SubClass','Bsmt_Qual_No_Basement_x_Bsmt_Prop_c_',
'Neighborhood_NoRidge', 'MS_Zoning_infrequent_sklearn',
'Neighborhood_infrequent_sklearn','Paved_Drive_Y',
'Street_infrequent_sklearn',
'Utilities_infrequent_sklearn']
## end
step_rm =ColumnTransformer(
[('TO_DROP', 'drop', drop_cols )],
verbose_feature_names_out = False,
remainder='passthrough').set_output(transform = 'pandas')
pipeline = Pipeline([
('clean_data', clean_and_imputers),
('feat_eng', feature_eng),
('preprocessor', preprocessor_1),
('interactions', interactions),
# ('interactions_2nd_round', interactions_2nd),
('remove', step_rm),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
transformed_df = step_rm.fit_transform(interactions.fit_transform(prep_df))
##### Extracción de coeficientes
coefs = pd.DataFrame({
'variable':transformed_df.columns.to_list(),
'coefs': pipeline.named_steps['regressor'].coef_.round(5)
})
model = sm.OLS(ames_y_train, sm.add_constant(transformed_df) ).fit()
p_vals = (
model.pvalues.reset_index()
>> select( _.variable == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''}))
>> arrange (_.s,- _.p_val)
>>left_join(_, coefs, on = 'variable')
)
p_vals >> top_n(20,_.p_val) >> select (_.coefs, _.p_val,_.s,_.variable)
model.summary2()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) *ames_x_test.Gr_Liv_Area
y_obs = Sale_Price_test
##### Métricas de desempeño
predictores = transformed_df.columns.to_list()
get_metrics(y_pred, y_obs,predictors= len(predictores) )
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
## drop cols
drop_cols=['Alley_Pave', '3Ssn_Porch',
'Bldg_Type_2fmCon', 'House_Style_1Story',
'BsmtFin_Type_1_BLQ','BsmtFin_Type_1_Unf','MS_Zoning_RL',
'Garage_Qual_No_Garage','Bsmt_Qual_No_Basement',
'BsmtFin_Type_2_BLQ','Heating_QC_infrequent_sklearn',
'BsmtFin_Type_2_BLQ',
'BsmtFin_Type_2_Rec','BsmtFin_Type_1_LwQ',
'Bsmt_Cond_infrequent_sklearn',
'Bsmt_Exposure_Mn',
'Bsmt_Full_Bath','Overall_Qual_Poor_x_1s_Floor_prop_c_',
'Bsmt_Half_Bath','Garage_Qual_infrequent_sklearn',
'Condition_1_Feedr','Condition_1_infrequent_sklearn',
'Condition_2_infrequent_sklearn',
'Electrical_FuseF','BsmtFin_SF_2',
'Electrical_FuseF','Lot_Config_FR2',
'Electrical_SBrkr','BsmtFin_Type_2_Unf',
'Electrical_infrequent_sklearn',
'Exter_Cond_Gd','Lot_Area',
'Exter_Cond_TA','Bsmt_Cond_TA',
'Fireplace_Qu_infrequent_sklearn',
'Foundation_CBlock', 'Central_Air_Y',
'Foundation_CBlock','Neighborhood_Crawfor',
'Foundation_PConc','Bsmt_Cond_Gd',
'Foundation_infrequent_sklearn',
'Functional_Min2','Mo_Sold','Garage_Yr_Blt',
'Functional_infrequent_sklearn',
'Garage_Cars','Bedroom_AbvGr', 'Neighborhood_NridgHt',
'Garage_Cond_infrequent_sklearn',
'Garage_Qual_No_Garage_x_Garage_Prop_overGLA_c_',
'Garage_Type_BuiltIn', 'Fireplace_Qu_infrequent_sklearn_x_Fireplaces',
'Garage_Type_Detchd','Bsmt_Unf_SF',
'Garage_Type_infrequent_sklearn', 'Bsmt_Exposure_No',
'Garage_Type_infrequent_sklearn', 'Bldg_Type_Twnhs',
'Heating_QC_Gd','Fireplace_Qu_No_Fireplace_x_Fireplaces',
'House_Style_SFoyer','Bsmt_Qual_Gd','BsmtFin_Type_2_LwQ',
'House_Style_SLvl','Roof_Style_infrequent_sklearn','Fireplace_Qu_TA_x_Fireplaces',
'House_Style_infrequent_sklearn', 'Neighborhood_Somerst','Fireplace_Qu_Po_x_Fireplaces',
'Kitchen_Qual_infrequent_sklearn_x_Kitchen_AbvGr',
'Kitchen_Qual_infrequent_sklearn','Screen_Porch',
'Heating_infrequent_sklearn', 'Fireplace_Qu_Gd_x_Fireplaces','Garage_Cond_TA',
'Lot_Config_CulDSac', 'House_Style_2Story','Garage_Prop_overGLA_c_',
'Lot_Config_infrequent_sklearn','Total_Bsmt_SF',
'Lot_Shape_infrequent_sklearn', 'Lot_Shape_Reg',
'Lot_Shape_IR2', 'Lot_Config_Inside', 'Enclosed_Porch',
'Lot_Frontage', 'Heating_QC_Fa','Garage_Qual_infrequent_sklearn_x_Garage_Prop_overGLA_c_',
'Mas_Vnr_Area','Paved_Drive_P', 'Foundation_Slab',
'Mas_Vnr_Type_None', 'Open_Porch_SF','BsmtFin_Type_1_Rec',
'Misc_Val','Area_p_car_c_', 'Misc_Feature_Shed', 'Garage_Yr_Blt',
'MS_SubClass','Bsmt_Qual_No_Basement_x_Bsmt_Prop_c_',
'Neighborhood_NoRidge', 'MS_Zoning_infrequent_sklearn',
'Neighborhood_infrequent_sklearn','Paved_Drive_Y',
'Street_infrequent_sklearn',
'Utilities_infrequent_sklearn']
## end
step_rm =ColumnTransformer(
[('TO_DROP', 'drop', drop_cols )],
verbose_feature_names_out = False,
remainder='passthrough').set_output(transform = 'pandas')
pipeline = Pipeline([
('clean_data', clean_and_imputers),
('feat_eng', feature_eng),
('preprocessor', preprocessor_1),
('interactions', interactions),
# ('interactions_2nd_round', interactions_2nd),
('remove', step_rm),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
transformed_df = step_rm.fit_transform(interactions.fit_transform(prep_df))
##### Extracción de coeficientes
coefs = pd.DataFrame({
'variable':transformed_df.columns.to_list(),
'coefs': pipeline.named_steps['regressor'].coef_.round(5)
})
model = sm.OLS(ames_y_train, sm.add_constant(transformed_df) ).fit()
p_vals = (
model.pvalues.reset_index()
>> select( _.variable == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''}))
>> arrange (_.s,- _.p_val)
>>left_join(_, coefs, on = 'variable')
)
p_vals >> top_n(20,_.p_val) >> select (_.coefs, _.p_val,_.s,_.variable)
model.summary2()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) *ames_x_test.Gr_Liv_Area
y_obs = Sale_Price_test
##### Métricas de desempeño
predictores = transformed_df.columns.to_list()
get_metrics(y_pred, y_obs,predictors= len(predictores) )
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
drop_cols=['Alley_Pave', '3Ssn_Porch',
'Bldg_Type_2fmCon', 'House_Style_1Story',
'BsmtFin_Type_1_BLQ','BsmtFin_Type_1_Unf','MS_Zoning_RL',
'Garage_Qual_No_Garage','Bsmt_Qual_No_Basement',
'BsmtFin_Type_2_BLQ','Heating_QC_infrequent_sklearn',
'BsmtFin_Type_2_BLQ',
'BsmtFin_Type_2_Rec','BsmtFin_Type_1_LwQ',
'Bsmt_Cond_infrequent_sklearn',
'Bsmt_Exposure_Mn',
'Bsmt_Full_Bath','Overall_Qual_Poor_x_1s_Floor_prop_c_',
'Bsmt_Half_Bath','Garage_Qual_infrequent_sklearn',
'Condition_1_Feedr','Garage_Qual_TA_x_Garage_Prop_overGLA_c_',
'Condition_2_infrequent_sklearn',
'Electrical_FuseF','BsmtFin_SF_2',
'Electrical_FuseF','Lot_Config_FR2',
'Electrical_SBrkr','BsmtFin_Type_2_Unf',
'Electrical_infrequent_sklearn',
'Exter_Cond_Gd','Lot_Area',
'Exter_Cond_TA','Bsmt_Cond_TA',
'Fireplace_Qu_infrequent_sklearn',
'Foundation_CBlock', 'Central_Air_Y',
'Foundation_CBlock','Neighborhood_Crawfor',
'Foundation_PConc','Bsmt_Cond_Gd',
'Foundation_infrequent_sklearn',
'Functional_Min2','Mo_Sold','Garage_Yr_Blt',
'Functional_infrequent_sklearn',
'Garage_Cars','Bedroom_AbvGr', 'Neighborhood_NridgHt',
'Garage_Cond_infrequent_sklearn',
'Garage_Qual_No_Garage_x_Garage_Prop_overGLA_c_',
'Garage_Type_BuiltIn', 'Fireplace_Qu_infrequent_sklearn_x_Fireplaces',
'Garage_Type_Detchd','Bsmt_Unf_SF',
'Garage_Type_infrequent_sklearn', 'Bsmt_Exposure_No',
'Garage_Type_infrequent_sklearn', 'Bldg_Type_Twnhs',
'Heating_QC_Gd','Fireplace_Qu_No_Fireplace_x_Fireplaces',
'House_Style_SFoyer','Bsmt_Qual_Gd','BsmtFin_Type_2_LwQ',
'House_Style_SLvl','Roof_Style_infrequent_sklearn','Fireplace_Qu_TA_x_Fireplaces',
'House_Style_infrequent_sklearn', 'Neighborhood_Somerst','Fireplace_Qu_Po_x_Fireplaces',
'Kitchen_Qual_infrequent_sklearn_x_Kitchen_AbvGr',
'Kitchen_Qual_infrequent_sklearn','Screen_Porch',
'Heating_infrequent_sklearn', 'Fireplace_Qu_Gd_x_Fireplaces','Garage_Cond_TA',
'Lot_Config_CulDSac', 'House_Style_2Story','Garage_Prop_overGLA_c_',
'Lot_Config_infrequent_sklearn','Total_Bsmt_SF',
'Lot_Shape_infrequent_sklearn', 'Lot_Shape_Reg',
'Lot_Shape_IR2', 'Lot_Config_Inside', 'Enclosed_Porch',
'Lot_Frontage', 'Heating_QC_Fa','Garage_Qual_infrequent_sklearn_x_Garage_Prop_overGLA_c_',
'Mas_Vnr_Area','Paved_Drive_P', 'Foundation_Slab',
'Mas_Vnr_Type_None', 'Open_Porch_SF','BsmtFin_Type_1_Rec',
'Misc_Val','Area_p_car_c_', 'Misc_Feature_Shed', 'Garage_Yr_Blt',
'MS_SubClass','Bsmt_Qual_No_Basement_x_Bsmt_Prop_c_',
'Neighborhood_NoRidge', 'MS_Zoning_infrequent_sklearn',
'Neighborhood_infrequent_sklearn','Paved_Drive_Y',
'Street_infrequent_sklearn',
'Utilities_infrequent_sklearn']
## end
step_rm =ColumnTransformer(
[('TO_DROP', 'drop', drop_cols )],
verbose_feature_names_out = False,
remainder='passthrough').set_output(transform = 'pandas')
pipeline = Pipeline([
('clean_data', clean_and_imputers),
('feat_eng', feature_eng),
('preprocessor', preprocessor_1),
('interactions', interactions),
# ('interactions_2nd_round', interactions_2nd),
('remove', step_rm),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
transformed_df = step_rm.fit_transform(interactions.fit_transform(prep_df))
##### Extracción de coeficientes
coefs = pd.DataFrame({
'variable':transformed_df.columns.to_list(),
'coefs': pipeline.named_steps['regressor'].coef_.round(5)
})
model = sm.OLS(ames_y_train, sm.add_constant(transformed_df) ).fit()
p_vals = (
model.pvalues.reset_index()
>> select( _.variable == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''}))
>> arrange (_.s,- _.p_val)
>>left_join(_, coefs, on = 'variable')
)
p_vals >> top_n(20,_.p_val) >> select (_.coefs, _.p_val,_.s,_.variable)
model.summary2()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) *ames_x_test.Gr_Liv_Area
y_obs = Sale_Price_test
##### Métricas de desempeño
predictores = transformed_df.columns.to_list()
get_metrics(y_pred, y_obs,predictors= len(predictores) )
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
## drop cols
drop_cols=['Alley_Pave', '3Ssn_Porch',
'Bldg_Type_2fmCon', 'House_Style_1Story',
'BsmtFin_Type_1_BLQ','BsmtFin_Type_1_Unf','MS_Zoning_RL',
'Garage_Qual_No_Garage','Bsmt_Qual_No_Basement',
'BsmtFin_Type_2_BLQ','Heating_QC_infrequent_sklearn',
'BsmtFin_Type_2_BLQ',
'BsmtFin_Type_2_Rec','BsmtFin_Type_1_LwQ',
'Bsmt_Cond_infrequent_sklearn',
'Bsmt_Exposure_Mn',
'Bsmt_Full_Bath','Overall_Qual_Poor_x_1s_Floor_prop_c_',
'Bsmt_Half_Bath','Garage_Qual_infrequent_sklearn',
'Condition_1_Feedr','Half_Bath',
'Condition_2_infrequent_sklearn',
'Electrical_FuseF','BsmtFin_SF_2',
'Electrical_FuseF','Lot_Config_FR2',
'Electrical_SBrkr','BsmtFin_Type_2_Unf',
'Electrical_infrequent_sklearn',
'Exter_Cond_Gd','Lot_Area',
'Exter_Cond_TA','Bsmt_Cond_TA',
'Fireplace_Qu_infrequent_sklearn',
'Foundation_CBlock', 'Central_Air_Y',
'Foundation_CBlock','Neighborhood_Crawfor',
'Foundation_PConc','Bsmt_Cond_Gd',
'Foundation_infrequent_sklearn',
'Functional_Min2','Mo_Sold','Garage_Yr_Blt',
'Functional_infrequent_sklearn',
'Garage_Cars','Bedroom_AbvGr', 'Neighborhood_NridgHt',
'Garage_Cond_infrequent_sklearn',
'Garage_Qual_No_Garage_x_Garage_Prop_overGLA_c_',
'Garage_Type_BuiltIn', 'Fireplace_Qu_infrequent_sklearn_x_Fireplaces',
'Garage_Type_Detchd','Bsmt_Unf_SF',
'Garage_Type_infrequent_sklearn', 'Bsmt_Exposure_No',
'Garage_Type_infrequent_sklearn', 'Bldg_Type_Twnhs',
'Heating_QC_Gd','Fireplace_Qu_No_Fireplace_x_Fireplaces',
'House_Style_SFoyer','Bsmt_Qual_Gd','BsmtFin_Type_2_LwQ',
'House_Style_SLvl','Roof_Style_infrequent_sklearn','Fireplace_Qu_TA_x_Fireplaces',
'House_Style_infrequent_sklearn', 'Neighborhood_Somerst','Fireplace_Qu_Po_x_Fireplaces',
'Kitchen_Qual_infrequent_sklearn_x_Kitchen_AbvGr',
'Kitchen_Qual_infrequent_sklearn','Screen_Porch',
'Heating_infrequent_sklearn', 'Fireplace_Qu_Gd_x_Fireplaces','Garage_Cond_TA',
'Lot_Config_CulDSac', 'House_Style_2Story','Garage_Prop_overGLA_c_',
'Lot_Config_infrequent_sklearn','Total_Bsmt_SF',
'Lot_Shape_infrequent_sklearn', 'Lot_Shape_Reg',
'Lot_Shape_IR2', 'Lot_Config_Inside', 'Enclosed_Porch',
'Lot_Frontage', 'Heating_QC_Fa','Garage_Qual_infrequent_sklearn_x_Garage_Prop_overGLA_c_',
'Mas_Vnr_Area','Paved_Drive_P', 'Foundation_Slab',
'Mas_Vnr_Type_None', 'Open_Porch_SF','BsmtFin_Type_1_Rec',
'Misc_Val','Area_p_car_c_', 'Misc_Feature_Shed', 'Garage_Yr_Blt',
'MS_SubClass','Bsmt_Qual_No_Basement_x_Bsmt_Prop_c_',
'Neighborhood_NoRidge', 'MS_Zoning_infrequent_sklearn',
'Neighborhood_infrequent_sklearn','Paved_Drive_Y',
'Street_infrequent_sklearn',
'Utilities_infrequent_sklearn']
## end
step_rm =ColumnTransformer(
[('TO_DROP', 'drop', drop_cols )],
verbose_feature_names_out = False,
remainder='passthrough').set_output(transform = 'pandas')
pipeline = Pipeline([
('clean_data', clean_and_imputers),
('feat_eng', feature_eng),
('preprocessor', preprocessor_1),
('interactions', interactions),
# ('interactions_2nd_round', interactions_2nd),
('remove', step_rm),
('regressor', LinearRegression())])
# Entrenar el pipeline
pipeline.fit(ames_x_train, ames_y_train)
transformed_df = step_rm.fit_transform(interactions.fit_transform(prep_df))
##### Extracción de coeficientes
coefs = pd.DataFrame({
'variable':transformed_df.columns.to_list(),
'coefs': pipeline.named_steps['regressor'].coef_.round(5)
})
model = sm.OLS(ames_y_train, sm.add_constant(transformed_df) ).fit()
p_vals = (
model.pvalues.reset_index()
>> select( _.variable == _.index, _.p_val == -1)
>> mutate (s = case_when({
_.p_val<0.025:'***',
_.p_val<0.05:'**',
_.p_val<0.1:'*',
True:''}))
>> arrange (_.s,- _.p_val)
>>left_join(_, coefs, on = 'variable')
)
p_vals >> top_n(20,_.p_val) >> select (_.coefs, _.p_val,_.s,_.variable)
model.summary2()
## PREDICCIONES
y_pred = pipeline.predict(ames_x_test) *ames_x_test.Gr_Liv_Area
y_obs = Sale_Price_test
##### Métricas de desempeño
predictores = transformed_df.columns.to_list()
get_metrics(y_pred, y_obs,predictors= len(predictores) )
#
# y_pred = pipeline.predict(ames_x_val)*ames_x_val.Gr_Liv_Area
#
# get_metrics(y_pred,Sale_Price_validation,len(transformed_df.columns ) )
